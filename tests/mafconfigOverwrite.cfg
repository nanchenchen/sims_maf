# to run:
# python runConfig.py allBinnerCfg.py

# Example MAF config file which runs each type of available binner.

import numpy as np
from lsst.sims.maf.driver.mafConfig import *
import os

# Setup Database access.  Note:  Only the "root.XXX" variables are passed to the driver.
root.outputDir = './Output'
filepath = os.path.join(os.getenv('SIMS_MAF_DIR'), 'tests/')
root.dbAddress ={'dbAddress':'sqlite:///' + filepath + 'opsimblitz1_1131_sqlite.db'}
root.opsimName = 'OpsimTest'

# Setup a list to hold all the binners we want to run
binList=[]

# How many Healpix sides to use
nside=64

# List of SQL constraints.  If multiple constraints are listed in a binner object, they are looped over and each one is executed individualy.  
constraints = ["filter = \'%s\'"%'r', "filter = \'%s\' and night < 730"%'r']

# Configure a Healpix binner:
m1 = configureMetric('CountMetric', params=['expMJD'],plotDict={'percentileClip':80., 'units':'#'})
m2 = configureMetric('Coaddm5Metric', plotDict={'zp':27., 'percentileClip':95, 'units':'Co-add m5 - %.1f'%27.})
#m3 = configureMetric('ParallaxMetric') #this should auto
# Combine metrics in a dictionary
metricDict = makeDict(m1,m2)
# Generate the binner configuration, passing in the metric configurations and SQL constraints
binner = configureBinner('HealpixBinner',
                          kwargs={"nside":nside,'spatialkey1':"fieldRA", 'spatialkey2':"fieldDec"},
                          metricDict = metricDict,setupKwargs={"leafsize":50000},constraints=constraints)
# Add the binner to the list of binners
binList.append(binner)

# Run the same metrics, but now use the hexdither field positions:
# As before, but new spatialkeys.  Note, there's no metadata added, so this will overwrite the binner above!
binner = configureBinner('HealpixBinner',
                          kwargs={"nside":nside,'spatialkey1':"hexdithra", 'spatialkey2':"hexdithdec"},
                          metricDict = metricDict,setupKwargs={"leafsize":50000},constraints=constraints)
# Add this binner to the list of binners
binList.append(binner)


# Save all the binners to the config
root.binners=makeDict(*binList)


# Optional comment string
root.comment = 'a config file that tries to overwrite things'
