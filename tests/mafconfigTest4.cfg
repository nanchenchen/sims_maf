# to run:
# python runConfig.py allBinnerCfg.py

# Make sure summary stats are getting computed in all cases.

import numpy as np
from lsst.sims.maf.driver.mafConfig import *
import os

# Setup Database access.  Note:  Only the "root.XXX" variables are passed to the driver.
root.outputDir = './Output'
filepath = os.environ['SIMS_MAF_DIR']+'/examples/'
root.dbAddress ={'dbAddress':'sqlite:///'+filepath+'opsim_small.sqlite', 'OutputTable':'opsim_small'}
root.opsimName = 'opsim_small'

filter='r'
# Setup a list to hold all the binners we want to run
binList=[]

# Configure a Healpix binner:
m1 = makeMetricConfig('CountMetric', params=['expMJD'],plotDict={'percentileClip':80., 'units':'#'})
m2 = makeMetricConfig('Coaddm5Metric', kwargs={'m5col':'5sigma_modified'}, plotDict={'zp':27., 'percentileClip':95, 'units':'Co-add m5 - %.1f'%27.}, summaryStats={'MeanMetric':{},'RmsMetric':{}, })
m3 = makeMetricConfig('VisitPairs', summaryStats={'MeanMetric':{}})
#m3 = makeMetricConfig('ParallaxMetric') #this should auto
# Combine metrics in a dictionary
metricDict = makeDict(m1,m2)
# Generate the binner configuration, passing in the metric configurations and SQL constraints
binner = makeBinnerConfig('OpsimFieldBinner', metricDict=metricDict, constraints=["filter = \'%s\'"%(filter)])
    binList.append(binner)
# Add the binner to the list of binners
binList.append(binner)


# Save all the binners to the config
root.binners=makeDict(*binList)

