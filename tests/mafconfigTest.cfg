# Config to exercise all the major driver functions

import numpy as np
from lsst.sims.maf.driver.mafConfig import *
import os

# Setup Database access.  Note:  Only the "root.XXX" variables are passed to the driver.
root.outputDir = './Output'
filepath = os.path.join(os.getenv('SIMS_MAF_DIR'), 'tests/')
root.dbAddress ={'dbAddress':'sqlite:///' + filepath + 'opsimblitz1_1131_sqlite.db'}
root.opsimName = 'OpsimTest'


# Setup a list to hold all the binners we want to run
binList=[]
colors={'u':'m','g':'b','r':'g','i':'y','z':'Orange','y':'r'}
filters=['r','g']
# How many Healpix sides to use
nside=16

# List of SQL constraints.  If multiple constraints are listed in a binner object, they are looped over and each one is executed individualy.  
constraints = ["filter = \'%s\' and night < 15"%'r', "filter = \'%s\' and night < 15"%'g']

# Configure a Healpix binner:
m1 = configureMetric('CountMetric', params=['expMJD'],plotDict={'percentileClip':80., 'units':'#'}, summaryStats={'MeanMetric':{}})
m2 = configureMetric('Coaddm5Metric', kwargs={'m5col':'fivesigma_modified'}, plotDict={'zp':27., 'percentileClip':95, 'units':'Co-add m5 - %.1f'%27.})
m3 = configureMetric('ParallaxMetric', kwargs={'m5col':'fivesigma_modified'}) #this should automatically call a stacker
# Combine metrics in a dictionary
metricDict = makeDict(m1,m2,m3)
# Generate the binner configuration, passing in the metric configurations and SQL constraints
binner = configureBinner('HealpixBinner',
                          kwargs={"nside":nside,'spatialkey1':"fieldRA", 'spatialkey2':"fieldDec"},
                          metricDict = metricDict, constraints=constraints)
# Add the binner to the list of binners
binList.append(binner)

# Run the same metrics, but now use the hexdither field positions:
# As before, but new spatialkeys and add a metadata keyword so the previous files don't get overwritten
binner = configureBinner('HealpixBinner',
                          kwargs={"nside":nside,'spatialkey1':"hexdithra", 'spatialkey2':"hexdithdec"},
                          metricDict = metricDict,constraints=constraints, metadata='dith')
# Add this binner to the list of binners
binList.append(binner)


# Configure a OneDBinner:
# Configure a new metric
m1 = configureMetric('CountMetric', params=['slewDist'])
metricDict=makeDict(m1)
binner = configureBinner('OneDBinner', kwargs={"sliceDataColName":'slewDist'},
                          metricDict=metricDict, constraints=constraints)
binList.append(binner)


m1 = configureMetric('CountMetric', params=['normairmass'], kwargs={'metricName':'normAir_hex'})
metricDict=makeDict(m1)
stacker = ColStackConfig()
stacker.name='NormAirmass'
stacker.kwargs_str = {'decCol':'hexdithdec'}
binner = configureBinner('OneDBinner', kwargs={"sliceDataColName":'normairmass'},
                          metricDict=metricDict, constraints=constraints, stackCols = makeDict(stacker))
binList.append(binner)

m1 = configureMetric('CountMetric', params=['normairmass'])
metricDict=makeDict(m1)
binner = configureBinner('OneDBinner', kwargs={"sliceDataColName":'normairmass'},
                          metricDict=metricDict, constraints=constraints)
binList.append(binner)

# Configure an OpsimFieldBinner:
for f in filters:
    m1 = configureMetric('MinMetric', params=['airmass'], plotDict={'cmap':'RdBu'}, histMerge={'histNum':1, 'color':colors[f]})
    m4 = configureMetric('MeanMetric', params=['normairmass'])
    m3 = configureMetric('Coaddm5Metric',kwargs={'m5col':'fivesigma_modified'})
    m7 = configureMetric('CountMetric', params=['expMJD'], plotDict={'units':"#", 'percentileClip':80.})
    metricDict = makeDict(m1,m3,m4,m7)
    binner = configureBinner('OpsimFieldBinner', metricDict=metricDict, constraints=["filter = \'%s\' and night < 15"%f] )
    binList.append(binner)


# Configure a UniBinner.  
m1 = configureMetric('MeanMetric', params=['airmass'])
binner = configureBinner('UniBinner', metricDict=makeDict(m1), constraints=["filter = \'%s\' and night < 15"%'r'] )
binList.append(binner)
# Configure an Hourglass filter binner/metric
m1=configureMetric('HourglassMetric')
binner = configureBinner('HourglassBinner', metricDict=makeDict(m1), constraints=["filter = \'%s\' and night < 15"%'r'])
binList.append(binner)

# Save all the binners to the config
root.binners=makeDict(*binList)


# Optional comment string
root.comment = 'a config file that tries to exercise everything in the driver as a unit test'
